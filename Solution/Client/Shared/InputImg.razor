@using System.IO
@using Blazor.FileReader
@inject IFileReaderService fileReaderService


<div class="row">
    <div class="col-md-4">
        <label style="color:white">@Label</label>
        <div>
            <input style="color:white" type="file" @ref="inputElement" @onchange="ImageFileSelected" accept=".jpg,.jpeg,.png" />
        </div>
    </div>

    <div class="col-md-8">
        @if (imagenBase64 != null)
        {
            <div>
                <div style="margin:10px;">
                    <img src="data:image/jpeg;base64, @imagenBase64" class="img-fluid rounded" />
                </div>
            </div>}
        @if (ImagenTemporal != null)
        {
            <div>
                <div style="margin:10px;">
                    <img src="@ImagenTemporal" class="img-fluid" />
                </div>
            </div>
        }
    </div>
</div>
@code { [Parameter] public string Label { get; set; } = "Imagen";
    [Parameter] public string ImagenTemporal { get; set; }
    [Parameter] public EventCallback<string> ImagenSeleccionada { get; set; }
    private string imagenBase64;
    ElementReference inputElement;

    async Task ImageFileSelected()
    {
        foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
        {
            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4 * 1024))
            {
                var bytesImagen = new byte[memoryStream.Length];
                memoryStream.Read(bytesImagen, 0, (int)memoryStream.Length);
                imagenBase64 = Convert.ToBase64String(bytesImagen);
                await ImagenSeleccionada.InvokeAsync(imagenBase64);
                ImagenTemporal = null;
                StateHasChanged();
            }
        }
    } }
