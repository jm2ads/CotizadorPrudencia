// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Project.Client.Pages.ZirenPages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Project.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Project.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Project.Client.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Project.Shared.Entidades;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Project.Shared.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Project.Client.Repositorios;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\_Imports.razor"
using Project.Shared.PrudenciaDTOs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\Pages\ZirenPages\ModoComodo.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/{urlPartner}/ModoComodo")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/{urlPartner}/MCInterno")]
    public partial class ModoComodo : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 302 "D:\JM2\WP\CotizadorPrudencia\Solution\Client\Pages\ZirenPages\ModoComodo.razor"
       
    [Parameter] public string urlPartner { get; set; }
    // [Parameter] public SendModoComodoMail sendModoComodoMail { get; set; }
    [Parameter] public int xID { get; set; }

    private SendModoComodoMail sendModoComodoMail = new SendModoComodoMail();
    private MailApp mailApp = new MailApp();


    private string posterTemporal;


    private Admin admin = new Admin();

    private string adminNombre;
    private string adminPassWord;


    private string tC;
    private bool cntTCVisible = false;
    private bool cntEFCVisible = false;
    private bool cntDebVisible = false;






    private string oMedioPagoIDAux;

    #region Upload
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;


    Partner partner;
    protected async override Task OnInitializedAsync()
    {
        sendModoComodoMail.mailApp = mailApp;

        if (urlPartner == null)
            urlPartner = "ziren";


        var responseHttp3 = await repositorio.Get<Partner>("api/ZirenHeads/GetParternByUrl/" + urlPartner);

        partner = responseHttp3.Response;
    }

    private async Task LoadFront(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.File;

        var arrbytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(arrbytes);
        sendModoComodoMail.carFront = Convert.ToBase64String(arrbytes);
        isLoading = false;
    }
    private async Task LoadBack(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.File;

        var arrbytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(arrbytes);
        sendModoComodoMail.carBack = Convert.ToBase64String(arrbytes);
        isLoading = false;
    }
    private async Task LoadRight(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.File;

        var arrbytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(arrbytes);
        sendModoComodoMail.carRight = Convert.ToBase64String(arrbytes);
        isLoading = false;
    }
    private async Task LoadLeft(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.File;

        var arrbytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(arrbytes);
        sendModoComodoMail.carLeft = Convert.ToBase64String(arrbytes);
        isLoading = false;
    }
    private async Task LoadCedulaFront(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.File;

        var arrbytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(arrbytes);
        sendModoComodoMail.cedulaFront = Convert.ToBase64String(arrbytes);
        isLoading = false;
    }
    private async Task LoadCedulaBack(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.File;

        var arrbytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(arrbytes);
        sendModoComodoMail.cedulaBack = Convert.ToBase64String(arrbytes);
        isLoading = false;
    }
    private async Task LoadDniFront(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.File;

        var arrbytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(arrbytes);
        sendModoComodoMail.dniFront = Convert.ToBase64String(arrbytes);
        isLoading = false;
    }
    private async Task LoadDniBack(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.File;

        var arrbytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(arrbytes);
        sendModoComodoMail.dniBack = Convert.ToBase64String(arrbytes);
        isLoading = false;
    }
    private async Task LoadGncTubo(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.File;

        var arrbytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(arrbytes);
        sendModoComodoMail.gncTubo = Convert.ToBase64String(arrbytes);
        isLoading = false;
    }
    #endregion




    public string oMedioPagoID
    {
        get { return oMedioPagoIDAux; }
        set
        {
            oMedioPagoIDAux = value;
            sendModoComodoMail.MedioPago = oMedioPagoIDAux;
            OnMedioPagoChange();
        }
    }
    private void ImagenSeleccionada(string imagenBase64)
    {
        sendModoComodoMail.carFront = imagenBase64;
        posterTemporal = null;
    }

    private async void OnSubmit()
    {

        if (string.IsNullOrEmpty(sendModoComodoMail.carFront) || string.IsNullOrEmpty(sendModoComodoMail.carBack) ||
            string.IsNullOrEmpty(sendModoComodoMail.carRight) || string.IsNullOrEmpty(sendModoComodoMail.carLeft) ||
            string.IsNullOrEmpty(sendModoComodoMail.cedulaFront) || string.IsNullOrEmpty(sendModoComodoMail.cedulaBack) ||
            string.IsNullOrEmpty(sendModoComodoMail.dniFront) || string.IsNullOrEmpty(sendModoComodoMail.dniBack))
        {

            await mostrarMensajes.MostrarMensajeError("La unica imagen opcional es la de GNC");
            return;
        }


        if (string.IsNullOrEmpty(sendModoComodoMail.NombreApellido) || string.IsNullOrEmpty(sendModoComodoMail.Domicilio) ||
            string.IsNullOrEmpty(sendModoComodoMail.Localidad) || string.IsNullOrEmpty(sendModoComodoMail.Celular) ||
            string.IsNullOrEmpty(sendModoComodoMail.Email) || string.IsNullOrEmpty(sendModoComodoMail.Patente) ||
            string.IsNullOrEmpty(sendModoComodoMail.Ano) || string.IsNullOrEmpty(sendModoComodoMail.MedioPago))
        {

            await mostrarMensajes.MostrarMensajeError("Nombre y Apellido, Domicilio, Localidad, Celular, Email, Patente, AÃ±o y Medio de Pago son obligatorios");
            return;
        }

        switch (oMedioPagoID)
        {
            case "TC":
                if (string.IsNullOrEmpty(sendModoComodoMail.NombreApellidoTC) || string.IsNullOrEmpty(sendModoComodoMail.DNITC) ||
                               string.IsNullOrEmpty(sendModoComodoMail.NroTc) || string.IsNullOrEmpty(sendModoComodoMail.VtoTc) |
                               string.IsNullOrEmpty(tC))
                {


                    await mostrarMensajes.MostrarMensajeError("Nombre y Apellido, DNI, Nro y Vto de Tarjeta de Credito son obligatorios");
                    return;
                }
                else
                {
                    switch (tC)
                    {
                        case "0":
                            sendModoComodoMail.MarcaTC = "VISA";
                            break;
                        case "1":
                            sendModoComodoMail.MarcaTC = "AMERICAN EXPRESS";
                            break;
                        case "2":
                            sendModoComodoMail.MarcaTC = "MASTERCARD";
                            break;
                        case "3":
                            sendModoComodoMail.MarcaTC = "TARJETA NARANJA";
                            break;
                        case "4":
                            sendModoComodoMail.MarcaTC = "TARJETA CABAL";
                            break;
                        default:
                            break;
                    }
                }
                break;
            case "EF":
                break;
            case "DEB":
                if (string.IsNullOrEmpty(sendModoComodoMail.NombreApellidoCBU) || string.IsNullOrEmpty(sendModoComodoMail.NroCBU))
                {

                    await mostrarMensajes.MostrarMensajeError("Nombre y Apellido y Nrode CBU son obligatorios");
                    return;
                }
                break;
            default:


                break;

        }



        sendModoComodoMail.partner = partner;


        #region CotizacionEntitiesDTO
        //if (navigationManager.Uri.Contains("MCInterno"))
        //{
        string cotizacionEntitiesDTOJson = await js.GetFromLocalStorage("CotizacionEntitiesDTO");
        CotizacionEntitiesDTO cotizacionEntitiesDTO = JsonSerializer.Deserialize<CotizacionEntitiesDTO>(cotizacionEntitiesDTOJson);
        sendModoComodoMail.CotizacionEntitiesDTO = cotizacionEntitiesDTO;
        //}
        #endregion

        MailApp oMailApp = new MailApp();
        string oSubject = "Ziren => Modo Comodo Nueva solicitud";
        oMailApp.To = sendModoComodoMail.mailApp.To;
        oMailApp.Bcc = "clientes@ziren.com.ar";
        // oMailApp.Body = oBody;
        oMailApp.Subject = oSubject;



        sendModoComodoMail.mailApp = oMailApp;

     await   SendModoComodoMail(sendModoComodoMail);
    }
    private async Task SendModoComodoMail(SendModoComodoMail sendModoComodoMail)
    {
        var responseHttp2 = await repositorio.Post<SendModoComodoMail, string>("api/Externo/Prudencia/SendModoComodoMail", sendModoComodoMail);

        if (responseHttp2.Error)
        {
            var mensajeError = await responseHttp2.GetBody();

            await mostrarMensajes.MostrarMensajeError("No se pudo enviar el mail con los enlaces para la poliza");
        }
        else
        {
            await mostrarMensajes.MostrarMensajeExitoso("Se le envio un mail con los enlaces para la poliza");
            navigationManager.NavigateTo($"/" + urlPartner);
        }

    }
    private async void OnMedioPagoChange()
    {
        cntTCVisible = false;
        cntEFCVisible = false;
        cntDebVisible = false;
        switch (oMedioPagoID)
        {
            case "TC":
                cntTCVisible = true;
                break;
            case "EF":
                cntEFCVisible = true;
                break;
            case "DEB":
                cntDebVisible = true;
                break;
            default:
                break;
        }


    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMostrarMensajes mostrarMensajes { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRepositorio repositorio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
    }
}
#pragma warning restore 1591
