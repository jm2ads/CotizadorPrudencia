@page "/"
@page "/index"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject NavigationManager navigationManager
@inject ILocalStorageManager LocalStorageManager
@inject IJSRuntime js
@using System.Text.Json;


@*@if (permisoNotificaciones == string.Empty)
{
    <Cargando></Cargando>

}
else
{
    @if (permisoNotificaciones == "granted")
    {
        <button @onclick="Desuscribir" class="btn btn-warning">Desactivar Notificación Nuevas Polizas</button>
    }
    else if (permisoNotificaciones == "default")
    {
        <button @onclick="Suscribir" class="btn btn-primary">Activar Notificación Nuevas Polizas</button>
    }
}*@


<h2 style="color:white">Cotize su Auto OnLine </h2>
<div style="height: 400px;display: flex;align-items: flex-start;">
    <a href="/ziren/marcas" class="btn btn-success" style="align-self:initial; ">Cotizar</a>
</div>
<div style="position:absolute;bottom:0;">
  

    <label style="color:white;font-size: 0.5em;align-content:end">Version 20.9.13.5</label>
</div>
    @code { private Login oLogin = null;

        private CotizacionAutoDTO oCotizacionAutoDTO;
        private string permisoNotificaciones = string.Empty;

        protected async override Task OnInitializedAsync()
        {
            #region MyRegion
            //await repositorio.Post("api/notificaciones/TextToSpeech", "Esto es un Test");
            //permisoNotificaciones = await js.ObtenerEstatusPermisoNotificaciones();
            #endregion

            oCotizacionAutoDTO = new CotizacionAutoDTO();
            oCotizacionAutoDTO.vehiculo = new VehiculoDTO();
            oCotizacionAutoDTO.asegurado = new AseguradoPatrimonialDTO();
            oCotizacionAutoDTO.cotizacionID = 0;


            string CotizacionAutoDTOJson = JsonSerializer.Serialize(oCotizacionAutoDTO);

            await js.SetInLocalStorage("CotizacionAutoDTO", CotizacionAutoDTOJson);
            Console.WriteLine(CotizacionAutoDTOJson);

            string oUser = "586701";
            string oPassword = "586701";

            UserPassWord oUserPassWord = new UserPassWord();

            oUserPassWord.user = oUser;
            oUserPassWord.password = oPassword;



            //var HttpResponse = await repositorio.Post<UserPassWord, Login>("api/Externo/Prudencia/login", oUserPassWord);
            //oLogin = HttpResponse.Response;


        }

        private async Task Suscribir()
        {
            var notificacion = await js.SuscribirANotificaciones();

            if (notificacion != null)
            {
                await repositorio.Post("api/notificaciones/suscribir", notificacion);
                permisoNotificaciones = await js.ObtenerEstatusPermisoNotificaciones();
                await mostrarMensajes.MostrarMensajeExitoso("Vas a recibir una notificación cuando salga una nueva película en cartelera");
                //#if DEBUG
                Console.WriteLine("URL : " + notificacion.URL);
                Console.WriteLine("P256dh : " + notificacion.P256dh);
                Console.WriteLine("Auth : " + notificacion.Auth);
                //#endif
                StateHasChanged();
            }

        }

        private async Task Desuscribir()
        {
            var notificacion = await js.DesuscribirANotificaciones();

            if (notificacion != null)
            {
                await repositorio.Post("api/notificaciones/desuscribir", notificacion);
                permisoNotificaciones = await js.ObtenerEstatusPermisoNotificaciones();
                await mostrarMensajes.MostrarMensajeExitoso("Ya no vas a recibir notificaciones");
                StateHasChanged();
            }
        }
    }
