@page "/test"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensajes mostrarMensajes
@inject IJSRuntime JSRuntime
@using System.IO
@inject BrowserService Service
@using System.Text.Json;




        @inject IJSRuntime JsRuntime

        <h3 style="color:white;text-align: center">YA TENES TU SEGURO !!!</h3>

        <h4 style="color:white;text-align: center">DESCARGUE LA DOCUMENTACIÓN DEL SEGURO📲</h4>

        @if (oRespuestaReporteDTOList == null)
        {
            <div style="margin-right: 2%; margin-bottom: 10px; text-align: center;">
                <Cargando></Cargando>
            </div>
        }
        else
        {
            @for (int i = 0; i <= oRespuestaReporteDTOList.Count() - 1; i++)
            {
                <div style="margin-right: 2%; margin-bottom: 10px; text-align: center;">
                    <div>
                        <a href="@oRespuestaReporteDTOList[i].urlReporte" target="_blank" class="btn btn-success" style="width:250px">@oRespuestaReporteDTOList[i].reporte</a>
                    </div>
                </div>
            }




            <h6 style="color:white;text-align: center">TAMBIÉN TE ENVIAMOS ESTA DOCUMENTACIÓN  A TU CORREO ELECTRÓNICO ✉️📪 💻📱</h6>
            <div class="container-fluid" style="text-align: center;justify-content:center;display: flex;align-items:center">
                <img src="/images/ziren.png" class="img-fluid" style="width: 190px;height:83px;
        margin: 2px;
        display: inline-block;
        border: 0;
        padding: 0;" />

                <img src="/images/PrudencioAdrielito.png" class="img-fluid" style="width: 162px;height:190px;
        margin: 2px;top:50%;
        display: inline-block;
        border: 0;
        padding: 0;" />
            </div>



            <h6 style="color:white;text-align: center">GRACIAS POR ELEGIRNOS ☺️ Y CONFIAR EN NOSOTROS 😊</h6>


        }





        <h3 style="color:white;text-align: center">test</h3>



        <input @ref="username" />
        <button @onclick="SetFocusAsync">Habilitar</button>
        <button @onclick="SetFocusAsync2"> Des Habilitar</button>
        <button @onclick="GetBrowserDimension">Browser Dimension</button>
        <label style="color:white;font-size: 0.8em;align-content:end;margin-left:5px">
            @browserDimensionWidth
        </label>


        <button @onclick="SetDisableAsync">disable on username</button>
        <EditForm Model="@employee" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />


            <InputText id="employeeName" class="form-control" @bind-Value="@employee.Name"></InputText>


            <button type="submit">Submit</button>
        </EditForm>

        @code {
            private Employee employee = new Employee();

            private void HandleValidSubmit()
            {
                Console.WriteLine("OnValidSubmit");
            }
            public class Employee
            {
                public int ID { get; set; } = 1;
                public string Name { get; set; } = "Nancy";
            }


            List<RespuestaReporteDTO> oRespuestaReporteDTOList;

            private BrowserDimension browserDimension;

            private ElementReference username;
            private int browserDimensionWidth;

            public async Task SetFocusAsync()
            {
                username.FocusAsync();
                // await username.FocusAsync(JsRuntime);
                Console.WriteLine("Mando True");
                await JSRuntime.InvokeVoidAsync("JsFunctions.enableElementB", "employeeName", true);
            }
            public async Task SetFocusAsync2()
            {
                await JSRuntime.InvokeVoidAsync("JsFunctions.focusElementB", "employeeName");
                Console.WriteLine("Mando False");
                await JSRuntime.InvokeVoidAsync("JsFunctions.enableElementB", "employeeName", false);
            }

            public async Task SetDisableAsync()
            {
                await username.DisableAsync(JSRuntime);
                //  await username.DisableAsync(JsRuntime);

            }


            public async Task GetBrowserDimension()
            {
                browserDimension = await Service.GetDimensions();
                browserDimensionWidth = browserDimension.Width;



                RespuestaReporteDTO[] oRespuestaReporteDTOListAux = new RespuestaReporteDTO[2];

                oRespuestaReporteDTOListAux[0] = new RespuestaReporteDTO();
                oRespuestaReporteDTOListAux[1] = new RespuestaReporteDTO();
                oRespuestaReporteDTOListAux[0].reporte = "111111111111111";
                oRespuestaReporteDTOListAux[0].urlReporte = "111111111111111";
                oRespuestaReporteDTOListAux[1].reporte = "2222222";
                oRespuestaReporteDTOListAux[1].urlReporte = "2222222222";

                // SendEmail(oRespuestaReporteDTOListAux);

            }

            protected override async Task OnInitializedAsync()
            {


                RespuestaReporteDTO[] oRespuestaReporteDTOListAux = new RespuestaReporteDTO[7];

                var responseHttp = await repositorio.Get<RespuestaReporteDTO[]>($"api/Externo/Prudencia/polizas/16686793/reportes");
                if (responseHttp.Error)
                {
                    var mensajeError = await responseHttp.GetBody();

                    await mostrarMensajes.MostrarMensajeError(mensajeError);
                }
                else
                {


                    string reporteAux = "";

                    oRespuestaReporteDTOListAux = responseHttp.Response;
                    oRespuestaReporteDTOList = new List<RespuestaReporteDTO>();
                    for (int i = 0; i <= oRespuestaReporteDTOListAux.Count() - 1; i++)
                    {
                        switch (oRespuestaReporteDTOListAux[i].reporte)
                        {
                            case "TarjetaCirculacion.pdf":
                                reporteAux = "TARJETA DE CIRCULACION";
                                break;
                            case "Poliza.pdf":
                                reporteAux = "POLIZA";
                                break;
                            case "Factura.pdf":
                                reporteAux = "FACTURA";
                                break;
                            case "TarjetaMercosur.pdf":
                                reporteAux = "MERCOSUR";
                                break;
                            case "Clausulas.pdf":
                                reporteAux = "CLAUSULAS";
                                break;
                            default:
                                continue;

                                break;

                        }


                        RespuestaReporteDTO oRespuestaReporteDTO = new RespuestaReporteDTO();
                        oRespuestaReporteDTO.reporte = reporteAux;// oRespuestaReporteDTOListAux[i].reporte;
                        oRespuestaReporteDTO.urlReporte = oRespuestaReporteDTOListAux[i].urlReporte;

                        oRespuestaReporteDTOList.Add(oRespuestaReporteDTO);

                    }






                      SendEmail(oRespuestaReporteDTOListAux);


                }



            }

            private async Task SendEmail(RespuestaReporteDTO[] oRespuestaReporteDTOListAux)
            {

                string CotizacionAutoDTOJson = await JsRuntime.GetFromLocalStorage("CotizacionAutoDTO");
                CotizacionAutoDTO oCotizacionAutoDTO = JsonSerializer.Deserialize<CotizacionAutoDTO>(CotizacionAutoDTOJson);

                string cotizacionEntitiesDTOJson = await JsRuntime.GetFromLocalStorage("CotizacionEntitiesDTO");
                CotizacionEntitiesDTO cotizacionEntitiesDTO = JsonSerializer.Deserialize<CotizacionEntitiesDTO>(cotizacionEntitiesDTOJson);

                MailApp oMailApp = new MailApp();
                string oSubject = "Ziren => Enlaces de tu Poliza";
                oMailApp.To = oCotizacionAutoDTO.asegurado.mail;
                oMailApp.Bcc = "clientes@ziren.com.ar";
                // oMailApp.Body = oBody;
                oMailApp.Subject = oSubject;


                SendPolizaMailDTO sendPolizaMailDTO = new SendPolizaMailDTO();
                sendPolizaMailDTO.mailApp = oMailApp;
                sendPolizaMailDTO.cotizacionAutoDTO = oCotizacionAutoDTO;
                sendPolizaMailDTO.cotizacionEntitiesDTO = cotizacionEntitiesDTO;
                sendPolizaMailDTO.respuestaReporteDTOList = oRespuestaReporteDTOList;
                var responseHttp2 = await repositorio.Post<SendPolizaMailDTO, string>("api/Externo/Prudencia/SendPolizaMail", sendPolizaMailDTO);

                if (responseHttp2.Error)
                {
                    var mensajeError = await responseHttp2.GetBody();

                    await mostrarMensajes.MostrarMensajeError("No se pudo enviar el mail con los enlaces para la poliza");


                }
                else
                {
                    await mostrarMensajes.MostrarMensajeExitoso("Se le envio un mail con los enlaces para la poliza");

                }
            }



            public static string LeeArchivo(string rutaArchivo)
            {
                StreamReader sr = new StreamReader(@"D:\JM2\WP\CotizadorPrudencia\Solution\Client\wwwroot\templateMail.html");
                string contenido = sr.ReadToEnd();
                sr.Close();
                return contenido;
            }
        }