@page "/ziren/reporte/{polizaID:int}"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensajes mostrarMensajes
@inject IJSRuntime JsRuntime
@using System.Text.Json;

<h3 style="color:white;text-align: center">YA TENES TU SEGURO !!!</h3>

<h4 style="color:white;text-align: center">DESCARGUE LA DOCUMENTACIÓN DEL SEGURO📲</h4>
@if (oRespuestaReporteDTOList == null)
{
    <div style="margin-right: 2%; margin-bottom: 10px; text-align: center;">
        <Cargando></Cargando>
    </div>
}
else
{
    @for (int i = 0; i <= oRespuestaReporteDTOList.Count() - 1; i++)
    {
        <div style="margin-right: 2%; margin-bottom: 10px; text-align: center;">
            <div>
                <a href="@oRespuestaReporteDTOList[i].urlReporte" target="_blank" class="btn btn-success" style="width:250px">@oRespuestaReporteDTOList[i].reporte</a>
            </div>
        </div>
    }


    <h5 style="color:white;text-align: center">TAMBIÉN TE ENVIAMOS ESTA DOCUMENTACIÓN  A TU CORREO ELECTRÓNICO ✉️📪 💻📱</h5>

    <h5 style="color:white;text-align: center">GRACIAS POR ELEGIRNOS ☺️ Y CONFIAR EN NOSOTROS 😊</h5>



}





@code {
    [Parameter] public int polizaID { get; set; }

    List<RespuestaReporteDTO> oRespuestaReporteDTOList;


    protected override async Task OnInitializedAsync()
    {


        RespuestaReporteDTO[] oRespuestaReporteDTOListAux = new RespuestaReporteDTO[7];

        var responseHttp = await repositorio.Get<RespuestaReporteDTO[]>($"api/Externo/Prudencia/polizas/{polizaID}/reportes");
        if (responseHttp.Error)
        {
            var mensajeError = await responseHttp.GetBody();

            await mostrarMensajes.MostrarMensajeError(mensajeError);
        }
        else
        {




            string reporteAux = "";

            oRespuestaReporteDTOListAux = responseHttp.Response;
            oRespuestaReporteDTOList = new List<RespuestaReporteDTO>();
            for (int i = 0; i <= oRespuestaReporteDTOListAux.Count() - 1; i++)
            {
                switch (oRespuestaReporteDTOListAux[i].reporte)
                {
                    case "TarjetaCirculacion.pdf":
                        reporteAux = "TARJETA DE CIRCULACION";
                        break;
                    case "Poliza.pdf":
                        reporteAux = "POLIZA";
                        break;
                    case "Factura.pdf":
                        reporteAux = "FACTURA";
                        break;
                    case "TarjetaMercosur.pdf":
                        reporteAux = "MERCOSUR";
                        break;
                    case "Clausulas.pdf":
                        reporteAux = "CLAUSULAS";
                        break;
                    default:
                        continue;

                        break;

                }


                RespuestaReporteDTO oRespuestaReporteDTO = new RespuestaReporteDTO();
                oRespuestaReporteDTO.reporte = reporteAux;// oRespuestaReporteDTOListAux[i].reporte;
                oRespuestaReporteDTO.urlReporte = oRespuestaReporteDTOListAux[i].urlReporte;

                oRespuestaReporteDTOList.Add(oRespuestaReporteDTO);

            }




            SendEmail(oRespuestaReporteDTOListAux);


        }





    }


    private async Task SendEmail(RespuestaReporteDTO[] oRespuestaReporteDTOListAux)
    {

        string CotizacionAutoDTOJson = await JsRuntime.GetFromLocalStorage("CotizacionAutoDTO");
        CotizacionAutoDTO oCotizacionAutoDTO = JsonSerializer.Deserialize<CotizacionAutoDTO>(CotizacionAutoDTOJson);

        string cotizacionEntitiesDTOJson = await JsRuntime.GetFromLocalStorage("CotizacionEntitiesDTO");
        CotizacionEntitiesDTO cotizacionEntitiesDTO = JsonSerializer.Deserialize<CotizacionEntitiesDTO>(cotizacionEntitiesDTOJson);

        MailApp oMailApp = new MailApp();
        string oSubject = "Ziren => Enlaces de tu Poliza";
        oMailApp.To = oCotizacionAutoDTO.asegurado.mail;
        oMailApp.Bcc = "clientes@ziren.com.ar";
        // oMailApp.Body = oBody;
        oMailApp.Subject = oSubject;


        SendPolizaMailDTO sendPolizaMailDTO = new SendPolizaMailDTO();
        sendPolizaMailDTO.mailApp = oMailApp;
        sendPolizaMailDTO.cotizacionAutoDTO = oCotizacionAutoDTO;
        sendPolizaMailDTO.cotizacionEntitiesDTO = cotizacionEntitiesDTO;
        sendPolizaMailDTO.respuestaReporteDTOList = oRespuestaReporteDTOList;
        var responseHttp2 = await repositorio.Post<SendPolizaMailDTO, string>("api/Externo/Prudencia/SendPolizaMail", sendPolizaMailDTO);

        if (responseHttp2.Error)
        {
            var mensajeError = await responseHttp2.GetBody();

            await mostrarMensajes.MostrarMensajeError("No se pudo enviar el mail con los enlaces para la poliza");


        }
        else
        {
            await mostrarMensajes.MostrarMensajeExitoso("Se le envio un mail con los enlaces para la poliza");

        }
    }

}
